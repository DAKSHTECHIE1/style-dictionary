"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssAdvanced = void 0;
const style_dictionary_1 = __importDefault(require("style-dictionary"));
const prettier_1 = require("prettier");
const { fileHeader, formattedVariables } = style_dictionary_1.default.formatHelpers;
const cssAdvanced = ({ dictionary: originalDictionary, options = {
    rules: []
}, file, platform }) => {
    var _a, _b, _c, _d, _e;
    // get options
    const { outputReferences, descriptions } = options;
    // selector
    const defaultSelector = ((_a = file === null || file === void 0 ? void 0 : file.options) === null || _a === void 0 ? void 0 : _a.selector) !== undefined ? (_b = file === null || file === void 0 ? void 0 : file.options) === null || _b === void 0 ? void 0 : _b.selector : ':root';
    // query extension property
    const queryExtProp = ((_c = file === null || file === void 0 ? void 0 : file.options) === null || _c === void 0 ? void 0 : _c.queryExtensionProperty) || 'mediaQuery';
    // get queries from file options
    const rules = ((_d = file === null || file === void 0 ? void 0 : file.options) === null || _d === void 0 ? void 0 : _d.rules) || [{
            atRule: undefined,
            selector: undefined,
            matcher: () => true
        }];
    // set formatting
    const formatting = {
        commentStyle: descriptions ? 'long' : 'none',
    };
    // clone dictionary
    const dictionary = Object.assign({}, originalDictionary);
    // add prefix to tokens
    if (platform.prefix) {
        dictionary.allTokens = dictionary.allTokens.map(token => (Object.assign(Object.assign({}, token), { name: platform.prefix + '-' + token.name, path: [platform.prefix, ...token.path] })));
    }
    // get queries from tokens
    for (const designToken of dictionary.allTokens) {
        const atRule = (_e = designToken.$extensions) === null || _e === void 0 ? void 0 : _e[queryExtProp];
        // early abort if query does not exist on token
        if (!atRule)
            continue;
        // if query exists already from other token
        const currentQueryIndex = rules.findIndex((q) => q.atRule === atRule);
        // if query exists
        if (currentQueryIndex > -1) {
            rules[currentQueryIndex] = Object.assign(Object.assign({}, rules[currentQueryIndex]), { matcher: (token) => rules[currentQueryIndex].matcher(token) || token.$extensions[queryExtProp] === rules[currentQueryIndex].atRule });
        }
        // if query does not exist
        else {
            rules.push({
                atRule,
                matcher: (token) => { var _a; return ((_a = token.$extensions) === null || _a === void 0 ? void 0 : _a[queryExtProp]) === atRule; }
            });
        }
    }
    // add file header
    const output = [fileHeader({ file })];
    // add single theme css
    for (const { atRule, selector, matcher } of rules) {
        let preludes = !Array.isArray(atRule) ? [atRule] : atRule;
        // add selectors to preludes
        preludes.push(typeof selector === 'string' || selector === false ? selector : defaultSelector);
        // remove invalid preludes
        preludes = preludes.filter(Boolean);
        // filter tokens to only include the ones that pass the matcher
        const filteredDictionary = Object.assign(Object.assign({}, dictionary), { allTokens: dictionary.allTokens.filter(matcher || (() => true)) });
        // early abort if no matches
        if (!filteredDictionary.allTokens.length)
            continue;
        // add tokens into root
        const css = formattedVariables({ format: 'css', dictionary: filteredDictionary, outputReferences, formatting });
        // atRule css
        let cssWithSelector = css;
        for (const prelude of preludes.reverse()) {
            cssWithSelector = `${prelude} { ${cssWithSelector} }`;
        }
        // add css with or without query
        output.push(cssWithSelector);
    }
    // return prettified
    return (0, prettier_1.format)(output.join('\n'), { parser: 'css', printWidth: 500 });
};
exports.cssAdvanced = cssAdvanced;
