"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockParserInput = exports.parserOutput = void 0;
exports.parserOutput = {
    color: {
        value: 'red',
        comment: 'a red color',
        $type: 'color',
        $extensions: {},
        alpha: 0.5,
    },
};
const parserInput = {
    'json.w3c': `{
    "color": {
      "$value": 'red',
      "$description": "a red color",
      "$type": "color",
      "$extensions": {},
      "alpha": 0.5
    }
  }`,
    'json.default': `{
    "color": {
      "value": 'red',
      "description": "a red color",
      "type": "color",
      "extensions": {},
      "alpha": 0.5
    }
  }`,
    'json5.w3c': `{
    "color": {
      // comment
      $value: 'red',
      "$description": "a red color",
      '$type': "color",
      "$extensions": {},
      alpha: 0.5,
    }
  }`,
    'json5.default': `{
    "color": {
      // comment
      value: 'red',
      "description": "a red color",
      'type': "color",
      "extensions": {},
      alpha: 0.5,
    }
  }`,
};
/**
 *
 * @param contents jsonFormats or string taht replaces content in return
 * @returns predefined json string or override
 */
const getMockParserInput = (contents, filePath) => {
    // use predefined if no override
    if (['json5.default', 'json5.w3c', 'json.default', 'json.w3c'].includes(contents)) {
        contents = parserInput[contents];
    }
    return {
        filePath: filePath || `path/to/file/token.json`,
        contents,
    };
};
exports.getMockParserInput = getMockParserInput;
